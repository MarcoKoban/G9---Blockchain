import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script d'auto-update du prix toutes les heures
 * 
 * Ce script:
 * - Tourne en continu
 * - Change le prix toutes les heures
 * - Multiplie par un facteur al√©atoire entre 0.8 et 1.2
 * 
 * Usage:
 *   npx hardhat run scripts/auto-update-price.ts --network sepolia
 * 
 * Pour laisser tourner en background:
 *   nohup npx hardhat run scripts/auto-update-price.ts --network sepolia &
 */

// ========== CONFIGURATION ==========

const UPDATE_INTERVAL = 60 * 60 * 1000; // 1 heure en millisecondes
const MIN_MULTIPLIER = 0.8;  // Prix minimum: √ó 0.8
const MAX_MULTIPLIER = 1.2;  // Prix maximum: √ó 1.2

// ========== FONCTIONS ==========

/**
 * G√©n√©rer un nombre al√©atoire entre min et max
 */
function randomBetween(min: number, max: number): number {
  return Math.random() * (max - min) + min;
}

/**
 * Mettre √† jour le prix d'un NFT dans l'oracle
 */
async function updateNFTPrice(
  oracle: any,
  nftAddress: string,
  tokenId: number,
  currentPrice: bigint
): Promise<bigint> {
  // G√©n√©rer multiplicateur al√©atoire
  const multiplier = randomBetween(MIN_MULTIPLIER, MAX_MULTIPLIER);
  
  // Calculer nouveau prix
  const newPriceFloat = Number(ethers.formatEther(currentPrice)) * multiplier;
  const newPrice = ethers.parseEther(newPriceFloat.toFixed(18));
  
  // Calculer changement en %
  const changePercent = ((multiplier - 1) * 100).toFixed(2);
  const changeSymbol = multiplier >= 1 ? "+" : "";
  
  console.log("\n" + "=".repeat(60));
  console.log("üìä MISE √Ä JOUR DU PRIX NFT");
  console.log("=".repeat(60));
  console.log("Heure:", new Date().toLocaleString());
  console.log("Token ID:", tokenId);
  console.log("Ancien prix:", ethers.formatEther(currentPrice), "EUR");
  console.log("Multiplicateur:", multiplier.toFixed(4));
  console.log("Nouveau prix:", ethers.formatEther(newPrice), "EUR");
  console.log("Changement:", changeSymbol + changePercent + "%");
  
  // Mettre √† jour l'oracle
  console.log("\n‚è≥ Envoi de la transaction...");
  
  try {
    const tx = await oracle.updateNFTPrice(nftAddress, tokenId, newPrice);
    console.log("Transaction envoy√©e:", tx.hash);
    
    const receipt = await tx.wait();
    console.log("‚úÖ Transaction confirm√©e!");
    console.log("Bloc:", receipt?.blockNumber);
    console.log("Gas utilis√©:", receipt?.gasUsed.toString());
    console.log("üîó View on Etherscan:");
    console.log("   https://sepolia.etherscan.io/tx/" + receipt?.hash);
    
    return newPrice;
    
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la mise √† jour:", error.message);
    return currentPrice; // Garder l'ancien prix en cas d'erreur
  }
}

/**
 * Boucle principale
 */
async function main() {
  console.log("\nü§ñ AUTO-UPDATE SCRIPT D√âMARR√â");
  console.log("=".repeat(60));
  console.log("Intervalle:", UPDATE_INTERVAL / 1000 / 60, "minutes");
  console.log("Variation:", MIN_MULTIPLIER, "√†", MAX_MULTIPLIER);
  console.log("=".repeat(60));
  
  // Charger les adresses
  const network = await ethers.provider.getNetwork();
  const networkName = network.name === "unknown" ? "localhost" : network.name;
  const deploymentsPath = path.join(
    __dirname,
    "..",
    "deployments",
    `${networkName}-addresses.json`
  );
  
  if (!fs.existsSync(deploymentsPath)) {
    console.log("‚ùå Fichier deployments introuvable!");
    process.exit(1);
  }
  
  const addresses = JSON.parse(fs.readFileSync(deploymentsPath, "utf8"));
  const oracleAddress = addresses.oracle;
  const nftAddress = addresses.nft;
  
  if (!oracleAddress) {
    console.log("‚ùå Oracle non d√©ploy√©!");
    console.log("   Run: npx hardhat run scripts/deploy-oracle.ts --network", networkName);
    process.exit(1);
  }
  
  if (!nftAddress) {
    console.log("‚ùå NFT Contract non d√©ploy√©!");
    console.log("   Run: npx hardhat run scripts/deploy-all.ts --network", networkName);
    process.exit(1);
  }
  
  console.log("\nüìã Configuration:");
  console.log("Oracle:", oracleAddress);
  console.log("NFT Contract:", nftAddress);
  console.log("Network:", networkName);
  
  // Se connecter aux contrats
  const oracle = await ethers.getContractAt("SimplePriceOracle", oracleAddress);
  const nft = await ethers.getContractAt("NFTAssetToken", nftAddress);
  
  // V√©rifier quel Token ID nous allons mettre √† jour
  const TOKEN_ID = 1; // ID du premier NFT (immeuble)
  
  console.log("\nüì¶ NFT Token ID √† mettre √† jour:", TOKEN_ID);
  
  // V√©rifier si le NFT existe
  try {
    const owner = await nft.ownerOf(TOKEN_ID);
    console.log("   Owner:", owner);
    
    const assetData = await nft.assetData(TOKEN_ID);
    console.log("   Nom:", assetData.name);
    console.log("   Valuation actuelle (NFT contract):", ethers.formatEther(assetData.valuation), "EUR");
  } catch (error) {
    console.log("\n‚ö†Ô∏è  NFT Token ID", TOKEN_ID, "n'existe pas encore!");
    console.log("   Vous devez d'abord minter un NFT.");
    console.log("   Run: npx hardhat run scripts/mint-nft.ts --network", networkName);
    process.exit(1);
  }
  
  // Obtenir le prix initial depuis l'oracle
  let currentPrice: bigint;
  
  try {
    currentPrice = await oracle.getNFTPrice(nftAddress, TOKEN_ID);
    console.log("\n‚úÖ Prix dans l'Oracle:", ethers.formatEther(currentPrice), "EUR");
  } catch (error) {
    console.log("\n‚ö†Ô∏è  Prix initial non d√©fini dans l'Oracle!");
    
    // R√©cup√©rer la valuation depuis le NFT contract
    const assetData = await nft.assetData(TOKEN_ID);
    currentPrice = assetData.valuation;
    
    console.log("   Initialisation du prix dans l'Oracle:", ethers.formatEther(currentPrice), "EUR");
    
    const tx = await oracle.updateNFTPrice(nftAddress, TOKEN_ID, currentPrice);
    await tx.wait();
    console.log("   ‚úÖ Prix initial d√©fini dans l'Oracle!");
  }
  
  console.log("\n‚úÖ Script pr√™t! Mise √† jour toutes les", UPDATE_INTERVAL / 1000 / 60, "minutes");
  console.log("Appuyez sur Ctrl+C pour arr√™ter\n");
  
  // Boucle infinie
  let updateCount = 0;
  
  while (true) {
    // Attendre l'intervalle
    await new Promise(resolve => setTimeout(resolve, UPDATE_INTERVAL));
    
    // Mettre √† jour le prix
    updateCount++;
    console.log("\nüîÑ Mise √† jour #" + updateCount);
    
    currentPrice = await updateNFTPrice(oracle, nftAddress, TOKEN_ID, currentPrice);
    
    // Mettre √† jour aussi le prix dans le contrat NFT
    console.log("\n‚è≥ Mise √† jour du prix dans le contrat NFT...");
    try {
      const updateTx = await nft.updateValuation(TOKEN_ID, currentPrice);
      await updateTx.wait();
      console.log("‚úÖ Prix mis √† jour dans le contrat NFT aussi!");
    } catch (error: any) {
      console.log("‚ö†Ô∏è  Impossible de mettre √† jour le NFT contract:", error.message);
    }
    
    // Afficher le statut
    console.log("\nüí§ Prochaine mise √† jour dans", UPDATE_INTERVAL / 1000 / 60, "minutes...");
  }
}

// Gestion propre de l'arr√™t
process.on("SIGINT", () => {
  console.log("\n\nüëã Arr√™t du script...");
  console.log("Nombre de mises √† jour effectu√©es:", updateCount || 0);
  process.exit(0);
});

// Lancer le script
main().catch((error) => {
  console.error("\n‚ùå Erreur fatale:");
  console.error(error);
  process.exit(1);
});

// Variable globale pour compter les updates
let updateCount = 0;    