import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script pour initialiser les prix de TOUS les NFTs existants dans l'Oracle
 * 
 * Usage:
 *   npx hardhat run scripts/init-all-nft-prices.ts --network sepolia
 */

const DEFAULT_NFT_PRICE = ethers.parseEther("50000.0"); // 50,000 EUR

async function main() {
  console.log("\nüöÄ INITIALISATION DES PRIX DE TOUS LES NFTs");
  console.log("=".repeat(60));

  // Charger les adresses
  const network = await ethers.provider.getNetwork();
  const networkName = network.name === "unknown" ? "localhost" : network.name;
  const deploymentsPath = path.join(
    __dirname,
    "..",
    "deployments",
    `${networkName}-addresses.json`
  );

  if (!fs.existsSync(deploymentsPath)) {
    console.log("‚ùå Fichier deployments introuvable!");
    process.exit(1);
  }

  const addresses = JSON.parse(fs.readFileSync(deploymentsPath, "utf8"));
  const oracleAddress = addresses.oracle;
  
  // Utiliser NFTAssetTokenV2 (la bonne adresse)
  const nftAddress = "0xf16b0641A9C56C6db30E052E90DB9358b6D2C946"; // NFTAssetTokenV2

  if (!oracleAddress) {
    console.log("‚ùå Oracle non d√©ploy√©!");
    process.exit(1);
  }

  console.log("\nüìã Configuration:");
  console.log("Network:", networkName);
  console.log("Oracle:", oracleAddress);
  console.log("NFT Contract:", nftAddress);

  // Se connecter aux contrats
  const oracle = await ethers.getContractAt("SimplePriceOracle", oracleAddress);
  const nft = await ethers.getContractAt("NFTAssetTokenV2", nftAddress);
  const [signer] = await ethers.getSigners();

  console.log("\nSigner:", await signer.getAddress());

  // Obtenir le total supply
  console.log("\n" + "=".repeat(60));
  console.log("üìä D√âTECTION DES NFTs");
  console.log("=".repeat(60));

  const totalSupply = await nft.totalSupply();
  const total = Number(totalSupply);
  
  console.log("Total Supply:", total, "NFTs");

  if (total === 0) {
    console.log("\n‚ùå Aucun NFT n'a √©t√© mint√©!");
    console.log("   Mintez d'abord des NFTs avec:");
    console.log("   npx hardhat run scripts/mint-diamond.ts --network", networkName);
    process.exit(1);
  }

  // R√©cup√©rer tous les token IDs existants
  const tokenIds: number[] = [];
  
  for (let i = 0; i < total; i++) {
    try {
      const owner = await nft.ownerOf(i);
      if (owner && owner !== ethers.ZeroAddress) {
        tokenIds.push(i);
        console.log(`   ‚úÖ NFT #${i} - Owner: ${owner}`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  NFT #${i} n'existe pas ou a √©t√© br√ªl√©`);
    }
  }

  if (tokenIds.length === 0) {
    console.log("\n‚ùå Aucun NFT actif trouv√©!");
    process.exit(1);
  }

  console.log("\n‚úÖ", tokenIds.length, "NFT(s) actif(s) trouv√©(s):", tokenIds.join(", "));

  // Initialiser les prix
  console.log("\n" + "=".repeat(60));
  console.log("üí∞ INITIALISATION DES PRIX");
  console.log("=".repeat(60));

  let initialized = 0;
  let alreadySet = 0;

  for (const tokenId of tokenIds) {
    console.log(`\nüìù NFT #${tokenId}:`);
    
    try {
      // V√©rifier si un prix existe d√©j√†
      const priceData = await oracle.nftPrices(nftAddress, tokenId);
      
      if (priceData.isActive && priceData.price > 0n) {
        console.log("   ‚ÑπÔ∏è  Prix d√©j√† d√©fini:", ethers.formatEther(priceData.price), "EUR");
        console.log("   Derni√®re mise √† jour:", new Date(Number(priceData.lastUpdate) * 1000).toLocaleString());
        alreadySet++;
      } else {
        // Initialiser avec le prix par d√©faut
        console.log("   ‚è≥ Initialisation √†", ethers.formatEther(DEFAULT_NFT_PRICE), "EUR...");
        
        const tx = await oracle.updateNFTPrice(nftAddress, tokenId, DEFAULT_NFT_PRICE);
        console.log("   Transaction hash:", tx.hash);
        
        const receipt = await tx.wait();
        console.log("   ‚úÖ Prix initialis√©!");
        console.log("   Gas utilis√©:", receipt?.gasUsed.toString());
        
        initialized++;
      }
    } catch (error: any) {
      console.error("   ‚ùå Erreur:", error.message);
    }
  }

  console.log("\n" + "=".repeat(60));
  console.log("‚úÖ INITIALISATION TERMIN√âE");
  console.log("=".repeat(60));
  console.log("NFTs avec prix d√©j√† d√©fini:", alreadySet);
  console.log("NFTs nouvellement initialis√©s:", initialized);
  console.log("Total:", tokenIds.length, "NFTs");

  console.log("\nüéØ Prochaines √©tapes:");
  console.log("1. V√©rifier les prix: npx hardhat run scripts/check-oracle.ts --network", networkName);
  console.log("2. Lancer l'auto-update de tous les NFTs:");
  console.log("   npx hardhat run scripts/auto-update-all-nft-prices.ts --network", networkName);
  console.log("");
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
